* Don't forget the build needs to be x86 not x64 :D



* Time for low memwrite and high memwrite transition is needed



* Don't need such a longlarge display for the device



* Read a digital data definition file, emit digital data
	Done: Output the next 0-31 bit range
	d$00000000

	Done: Set the next 0-31 bit range, but not output
	s$00000000

	Done: Output the specified bit range from a file, for the whole file
	<0,1,2,3,4,5,6,7,<..\foo\bar.bin

	Done: Output the specified bit range from a file, from the start byte offset in the file, for the whole file. Data in the file must be aligned to 8 bits, a byte.
	<0,1,2,3,4,5,6,7,@$123,<..\foo\bar.bin

	Done: Output the specified bit range from a file, from the start byte offset in the file, for number of bytes. Data in the file must be aligned to 8 bits, a byte.
	<0,1,2,3,4,5,6,7,@$123,>$123,<..\foo\bar.bin

	Done: Output the specified bit range from a file, from the start for number of bytes. Data in the file must be aligned to 8 bits, a byte.
	<0,1,2,3,4,5,6,7,>$123,<..\foo\bar.bin

	Setup bits to be used for next output, but don't output any data
	<0,1,2,3,4,5,6,7,<




* Need bits counting syntax
	TODO: Add 1 binary to the bits specified for every clock
	+8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23


* Output bits from value, this uses the bits setup by <: b$73



* If the active sheet, when starting to debug, does not have the part on it then "if (mActiveModel->mRecord)" will fail as mActiveModel is null.
	CHAR *t = instance->getstrval((CHAR*)"RECORD", 0);
	Can be used instead of the active model



* Need wait for negative edge
	Wait for positive/negative edge on any of the specified input bits
	^+$01
	^-$01



* Moved from: BombJack\TODO.txt
	* TODO: Will need a replacement for the Proteus data generators because they have a 1024 byte limit
		Something better like the display part will do.
			Will need substantial outputs, and something to make it easier to output the address, with auto increment and _MEWR signals
			EBS 8 bits, address 16 bits (in effect 24 bits address, might as well make it 32 bits) data 8 bits, plus _MEWR signal
			Include binary chunks from data files, like the ROM dumps, no more editing hex values for binary image data

			
			
* The digital data part can be expanded to accept more inputs for RH and RV, no need for _HSYNC with this remapping model
	Will need a wait for value with bitmask



* Include definition files, push the current FP and open a new file, then at the end, pop the older FP




* Fixed a bug in DigitalData where waiting for an input value caused the first value to be skipped



* Added the option of recording the wait value with a supplied mask




* For: if (rvalue == 0)
	Make this a configuration item to filter out null writes



* When recording the sustained signal levels before the edge needs to be used




* Add last file name, pointer position and file line indicators to the display output
	Useful for debugging
	* Also add waiting for what indicator
	* And an error indicator?
	* These can be added as simple text, like the digital display module



* Improved accuracy of the HV wait timing, subsequent writes that are too soon will be delayed until the next clock.
	This makes it more like the APU.




* Add option for trigger then clock




* Validate write timings when recording
	Display warnings about what was not met in the debug log
	Debug break?
		Output a signal that indicates a write failure, which can be used as a logic analyser input or breakpoint
	While low, check for address being stable
	Check for address and data being stable pre neagtive and post positive edge
	>> Added:
		MWCHECKADDRESSHELDONLOW
		MWCHECKDATAHELDONLOW
		MWADDRESSHELDTIMEBEFORENEGEDGE
		MWADDRESSDATAHELDTIMEAFTERPOSEDGE
		MWADDRESSDATAHELDTIMEBEFOREPOSEDGE



* Test the write held times using specific input timing data




* This will cause the process to exit after a particular simulation time (in seconds) is reached.
	EXITPROCCESSAFTER=5.0
	DELETETHISFILE=1 will delete the model config file after it has been read
	FORCEFLUSH=1 will enable for flushing of output data




* Digital Data model could do with a "record on signal change" from either hi to low or low to high or any change, bit mask.
	Added RECORDSENSECHANGEMASK
	Output files contains something like: ;recordSenseChange:$08000000




* Daft idea. Deprecated. It makes more sense to reuse a better visualisation tool, like ELK
* Create an application that renders a digital logic analyser that listens on a specific network port for data.
	Then the digital data model in record mode can optionally send to this specific network port.
	This would allow multiple instances of the logic analyser to run and not be part of the main Proteus process (if Proteus crashes the capture windows are still open, which is useful)
	Also any breakpoints hit in Proteus will not stop the logic analyser window from working.
	Each instance can have an optional config file that remembers the input signal groups, names, colours etc
	Capture on pattern...
	Clear display when a new run is starting, or append to current display, clear display button
	With up to 32 signals for each window, this would be a minimum of 8 bytes for the time, plus 4 bytes for all signals, for each coincident update.
	* Command line to generate pattern data on a timer, to allow the update rendering to be tested
	* Command line option to limit the number of captures
		> Captures are stored in a round robin list making it easy and fast to search
		> When searching to find the current scroll start time, a binary search from the last position can be used
		>> -n 1000000
			The maximum number of entries to store
		>> -f 50.0
			How much buffer to keep before the first trigger.
	* Command line options to customise the display of the 32 signals
		> Zoom, the initial time period (in seconds by default) displayed in the width of the window: -z <time as a floating point value>
		> Apply names for each group
		> Binary/Hex/Decimal display
		> Group: -g <"Name here"> <b/d/h> <./! separated list of signal numbers in decimal>
			Displays an address bus value in hex from the signals (in their defined little endian ordering, numbers can be prefixed with 0), where 11-15 are inverted before display: -g "address bus" h .6.1.3.00.4.5.06.07.08.9.10!11!12!13!14!15
	* Toolbar button to clear current data
	* Status bar to display the start time of the buffer
		> end time
		> time delta
		> buffer fill status
	* Command line option to define trigger conditions
		> Trigger group: -tg <"the name"> <b/d/h> <value>
			Triggers on group "the name" reaching the hex value "ce1": -tg "the name" h ce1
		> Trigger on signal edge: -te <+/-><signal number>
		> Where capturing will then stop after the buffer is full
		> Pre-fill buffer limit defines how much data we can capture to after trigger
		> There could be more than one trigger in a capture buffer, render these
		> Toolbar buttons to seek to the prev/next state change
		> Toolbar buttons to seek to the prev/next trigger
		> Toolbar button to enable the trigger again, capturing more data (don't clear old data)
	* When receiving an update and the button "last" is pressed, then force the window scroll to the right hand end
	* Receive updates from VSMDigitalData network connection
	* Inspect the memory of the getdsimpin() result, see if there is a signal name in there.




* Could do with having variables and evaluating simple expressions for output data

	Done: e.g. Evaluate: d=$000300 | $70 | 1 | 2 | 4

	e.g.
	.BIT0 = 1
	.BIT1 = 2
	.BIT2 = 4
	
	d=BIT0 | BIT1 | BIT2
	Would output the equivalent of $07
	> Probably the best place would be to update getNextTok() in Data.cpp to return a longer string using substituted values if the first character is '='
		To ParamToUNum
		Then create a new ParamToUNum that evaluates simple expressions

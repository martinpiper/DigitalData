* Don't forget the build needs to be x86 not x64 :D



* Time for low memwrite and high memwrite transition is needed



* Don't need such a longlarge display for the device



* Read a digital data definition file, emit digital data
	Done: Output the next 0-31 bit range
	d$00000000

	Done: Set the next 0-31 bit range, but not output
	s$00000000

	Done: Output the specified bit range from a file, for the whole file
	<0,1,2,3,4,5,6,7,<..\foo\bar.bin

	Done: Output the specified bit range from a file, from the start byte offset in the file, for the whole file. Data in the file must be aligned to 8 bits, a byte.
	<0,1,2,3,4,5,6,7,@$123,<..\foo\bar.bin

	Done: Output the specified bit range from a file, from the start byte offset in the file, for number of bytes. Data in the file must be aligned to 8 bits, a byte.
	<0,1,2,3,4,5,6,7,@$123,>$123,<..\foo\bar.bin

	Done: Output the specified bit range from a file, from the start for number of bytes. Data in the file must be aligned to 8 bits, a byte.
	<0,1,2,3,4,5,6,7,>$123,<..\foo\bar.bin

	Setup bits to be used for next output, but don't output any data
	<0,1,2,3,4,5,6,7,<




* Need bits counting syntax
	TODO: Add 1 binary to the bits specified for every clock
	+8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23


* Output bits from value, this uses the bits setup by <: b$73



* If the active sheet, when starting to debug, does not have the part on it then "if (mActiveModel->mRecord)" will fail as mActiveModel is null.
	CHAR *t = instance->getstrval((CHAR*)"RECORD", 0);
	Can be used instead of the active model



* Need wait for negative edge
	Wait for positive/negative edge on any of the specified input bits
	^+$01
	^-$01



* Moved from: BombJack\TODO.txt
	* TODO: Will need a replacement for the Proteus data generators because they have a 1024 byte limit
		Something better like the display part will do.
			Will need substantial outputs, and something to make it easier to output the address, with auto increment and _MEWR signals
			EBS 8 bits, address 16 bits (in effect 24 bits address, might as well make it 32 bits) data 8 bits, plus _MEWR signal
			Include binary chunks from data files, like the ROM dumps, no more editing hex values for binary image data

			
			
* The digital data part can be expanded to accept more inputs for RH and RV, no need for _HSYNC with this remapping model
	Will need a wait for value with bitmask



* Include definition files, push the current FP and open a new file, then at the end, pop the older FP




* Fixed a bug in DigitalData where waiting for an input value caused the first value to be skipped



* Added the option of recording the wait value with a supplied mask




* For: if (rvalue == 0)
	Make this a configuration item to filter out null writes



* When recording the sustained signal levels before the edge needs to be used




* Add last file name, pointer position and file line indicators to the display output
	Useful for debugging
	* Also add waiting for what indicator
	* And an error indicator?
	* These can be added as simple text, like the digital display module



* Improved accuracy of the HV wait timing, subsequent writes that are too soon will be delayed until the next clock.
	This makes it more like the APU.




* Add option for trigger then clock
